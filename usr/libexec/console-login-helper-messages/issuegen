#!/bin/bash

# Get updated system information, including SSH keys and network devices,
# and generate an issue to display before login.

# Copyright (c) 2019 Fedora CoreOS Authors. All rights reserved.
# Copyright (c) 2013 The CoreOS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
# Modified from the CoreOS repository:
#  * https://github.com/coreos/init/blob/master/scripts/issuegen
#  * https://github.com/coreos/init/blob/master/scripts/sshd_keygen

set -e

PKG_NAME=console-login-helper-messages
ISSUE_SNIPPETS_PATH=${PKG_NAME}/issue.d

# Snippet locations that are read by issuegen to generate combined snippet
# data, which is outputted in ${generated_file} (below).
ETC_SNIPPETS="/etc/${ISSUE_SNIPPETS_PATH}"
RUN_SNIPPETS="/run/${ISSUE_SNIPPETS_PATH}"
USR_LIB_SNIPPETS="/usr/lib/${ISSUE_SNIPPETS_PATH}"

# Output locations for snippets produced by issuegen.
SNIPPETS_OUTDIR="${RUN_SNIPPETS}"
GENERATED_FILE_OUTDIR="/run/${PKG_NAME}"

# Check util-linux version, and set output directories accordingly.
# If not on an RPM-based system, then just continue keeping the output
# directories at their defaults.
if command -v rpm >/dev/null; then
	UTIL_LINUX_VERSION=$(rpm -q --queryformat="%{version}" util-linux)
	UTIL_LINUX_MAJOR_VERSION=$(echo ${UTIL_LINUX_VERSION} | awk -F '.' '{print $1}')
	UTIL_LINUX_MINOR_VERSION=$(echo ${UTIL_LINUX_VERSION} | awk -F '.' '{print $2}')
	# Check that util-linux-2.35 or higher is installed, which includes necessary
	# support for /run/issue.d: https://github.com/karelzak/util-linux/commit/456bcbca6b55fbed33d9f86e69a51abd0e1b8f0b
	if [[ ${UTIL_LINUX_MAJOR_VERSION} -gt 2 ]] || [[ ${UTIL_LINUX_MAJOR_VERSION} -eq 2 && ${UTIL_LINUX_MINOR_VERSION} -ge 35 ]]; then
		SNIPPETS_OUTDIR=/run/issue.d
		GENERATED_FILE_OUTDIR=/run/issue.d
	fi
fi

# Make sure the output directories are created upfront, so there is no error
# writing to them.
mkdir -p ${SNIPPETS_OUTDIR} ${GENERATED_FILE_OUTDIR}


# Provide key fingerprints via issue.
SSH_DIR=/etc/ssh
# Ensure `${SSH_DIR}` is created and can be searched without error.
mkdir -p "${SSH_DIR}"
SSH_KEY_OUTDIR="${SNIPPETS_OUTDIR}"
for KEY_FILE in $(find "${SSH_DIR}" -name 'ssh_host_*_key') ; do
	ssh-keygen -l -f "${KEY_FILE}"
done | awk '{print "SSH host key: " $2 " " $4}' > "${SSH_KEY_OUTDIR}/21_ssh_host_keys.issue"


# Add/remove data from udev rules.
UDEV_IF_OUTDIR="${SNIPPETS_OUTDIR}"
case "${ACTION}" in
	add)
		echo "${INTERFACE}: \\4{${INTERFACE}} \\6{${INTERFACE}}" > "${UDEV_IF_OUTDIR}/22_${INTERFACE}.issue"
		;;
	remove)
		rm -f "${UDEV_IF_OUTDIR}/22_${INTERFACE}.issue"
		;;
esac


# Generate a final issue message from compiling the snippets.
# Pick 40 as a prefix as other files can order around it easily.
generated_file="${GENERATED_FILE_OUTDIR}/40_${PKG_NAME}.issue"
generated_string=''
# Hack around files potentially not existing in the below paths with `|| true`.
generated_string+=$(cat ${ETC_SNIPPETS}/* 2>/dev/null || true)
generated_string+=$(cat ${RUN_SNIPPETS}/* 2>/dev/null || true)
generated_string+=$(cat ${USR_LIB_SNIPPETS}/* 2>/dev/null || true)

echo "${generated_string}" > "${generated_file}"
